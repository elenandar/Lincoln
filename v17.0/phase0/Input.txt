// ============================================================================
// PROJECT LINCOLN v17.0 - PHASE 0: NULL SYSTEM
// Input.txt - Input Modifier (AI Dungeon Modifier)
// ============================================================================
// 
// CRITICAL: ES5 JAVASCRIPT ONLY!
// - NO arrow functions, template literals, destructuring, spread operators
// - NO Array.includes(), Array.find(), Object.assign()
// - NO Map, Set, Promise, async/await
// - NO for...of loops
//
// This script processes user input BEFORE it's sent to the AI.
// It parses commands (starting with '/') and executes them from the
// CommandsRegistry, or passes through normal input unchanged.
//
// ============================================================================

var modifier = function(text) {
  // ========================================================================
  // ACCESS LC GLOBAL OBJECT
  // ========================================================================
  
  var LC = state.shared && state.shared.LC;
  
  // If LC not initialized, pass through
  if (!LC) {
    return {text: text};
  }
  
  // Initialize state.lincoln if needed
  var L = LC.lcInit();
  
  // ========================================================================
  // COMMAND DETECTION AND PARSING
  // ========================================================================
  
  var trimmed = text.trim();
  
  // Check if input starts with '/' (command prefix)
  if (trimmed.length > 0 && trimmed.charAt(0) === '/') {
    // Parse command and arguments
    var parts = trimmed.split(' ');
    var cmd = parts[0].toLowerCase();
    var args = parts.slice(1);
    
    // ======================================================================
    // COMMAND EXECUTION
    // ======================================================================
    
    // Check if command exists in registry
    if (LC.CommandsRegistry[cmd]) {
      var handler = LC.CommandsRegistry[cmd];
      
      try {
        // Execute command handler
        var result = handler(args, text);
        
        // Handle result
        if (result) {
          // Check for stop flag
          if (result.stop) {
            return {text: '', stop: true};
          }
          
          // Return command output
          if (result.text) {
            return {text: result.text};
          }
        }
        
        // Command executed successfully but returned nothing
        return {text: ''};
        
      } catch (e) {
        // Error executing command
        var errorMsg = '⟦SYS⟧ Error executing command: ' + e.message;
        return {text: errorMsg};
      }
    } else {
      // Unknown command
      var unknownMsg = '⟦SYS⟧ Unknown command: ' + cmd + '. Use /help for available commands.';
      return {text: unknownMsg};
    }
  }
  
  // ========================================================================
  // PASS THROUGH NON-COMMAND INPUT
  // ========================================================================
  
  // Not a command - pass through unchanged
  return {text: text};
};

// CRITICAL: Must call modifier function!
modifier(text);
