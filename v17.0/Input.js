/*
Module: Input â€” Lincoln v17.0.0-alpha.1
Phase 1: Infrastructure
Contract:
- Parses user input for commands
- Executes registered commands from CommandsRegistry
- Sets currentAction.type appropriately
- No v16 code copied - built from scratch based on MASTER_PLAN_v17.md
*/

(function () {
  const __SCRIPT_SLOT__ = "Input";

  // Get LC namespace
  const LC = (typeof globalThis !== "undefined" ? globalThis.LC : 
              (typeof self !== "undefined" ? self.LC : {}));

  if (!LC || !LC.lcInit) {
    throw new Error('[Input] LC.lcInit not found. Library.js must be loaded first.');
  }

  // Initialize state
  const L = LC.lcInit('Input');

  // Helper function for immediate reply and stop
  function replyStop(msg) {
    // Send immediate response
    if (typeof state !== 'undefined') {
      state.message = msg;
    }
    
    // Stop further processing
    if (typeof stop !== 'undefined') {
      stop();
    }
  }

  // Export replyStop to LC for use by commands
  LC.replyStop = replyStop;

  // Get input text
  const getInputText = () => {
    if (typeof text !== 'undefined') return text;
    if (typeof state !== 'undefined' && state.message) return state.message;
    return '';
  };

  const inputText = getInputText().trim();

  // Check if input is a command (starts with /)
  if (inputText.startsWith('/')) {
    // Parse command and arguments
    const parts = inputText.split(/\s+/);
    const command = parts[0].toLowerCase();
    const args = parts.slice(1);

    // Set action type to command
    L.currentAction = { type: 'command', command: command };

    // Look up command in registry
    if (LC.CommandsRegistry && LC.CommandsRegistry.has(command)) {
      try {
        // Execute command
        const handler = LC.CommandsRegistry.get(command);
        handler(L, args);

        // Get any system messages generated by the command
        const msgs = LC.lcConsumeMsgs();
        
        if (msgs.length > 0) {
          replyStop(msgs.join('\n'));
        } else {
          replyStop('Command executed.');
        }
      } catch (e) {
        const errMsg = 'Command error: ' + (e.message || String(e));
        if (typeof console !== 'undefined') {
          console.error('[Input]', errMsg, e);
        }
        replyStop(errMsg);
      }
    } else {
      // Unknown command
      replyStop('Unknown command: ' + command);
    }
  } else {
    // Not a command - set action type to story
    L.currentAction = { type: 'story' };
    
    // Pass through input unchanged (no modification needed for Phase 1)
  }

  // Log processing
  if (L.debugMode && typeof console !== 'undefined') {
    console.log('[Input] Action type:', L.currentAction.type);
  }

})();
