#!/usr/bin/env node
/**
 * Acceptance Criteria Test for Phase 1.3 - CommandsRegistry
 * 
 * This test validates the exact acceptance criteria from the ticket:
 * 
 * Test 1 (–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç):
 *   –î–µ–π—Å—Ç–≤–∏–µ: –í–≤–µ—Å—Ç–∏ –≤ –∏–≥—Ä–µ /ping.
 *   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –í –≤—ã–≤–æ–¥–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ü¶SYS‚üß Pong!. 
 *                        –¢–µ–∫—Å—Ç /ping –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏.
 * 
 * Test 2 (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞):
 *   –î–µ–π—Å—Ç–≤–∏–µ: –í–≤–µ—Å—Ç–∏ –≤ –∏–≥—Ä–µ /fly.
 *   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –í –≤—ã–≤–æ–¥–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 
 *                        ‚ü¶SYS‚üß Unknown command: "/fly".
 * 
 * Test 3 (–û–±—ã—á–Ω—ã–π –≤–≤–æ–¥):
 *   –î–µ–π—Å—Ç–≤–∏–µ: –í–≤–µ—Å—Ç–∏ –≤ –∏–≥—Ä–µ > –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ–∏ —Ä—É–∫–∏.
 *   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ò–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ. –¢–µ–∫—Å—Ç >  —É–¥–∞–ª—è–µ—Ç—Å—è, 
 *                        –∏ –≤ –ò–ò —É—Ö–æ–¥–∏—Ç —á–∏—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ–∏ —Ä—É–∫–∏".
 */

console.log("=== Acceptance Criteria Tests for Phase 1.3 - CommandsRegistry ===\n");

const fs = require('fs');
const path = require('path');

// Mock the global state object
global.state = {};

// Load library.js
const libraryCode = fs.readFileSync(path.join(__dirname, 'library.js'), 'utf8');
eval(libraryCode);

console.log("==============================================================");
console.log("–¢–ï–°–¢ 1: –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (/ping)");
console.log("==============================================================");
console.log("–î–µ–π—Å—Ç–≤–∏–µ: –í–≤–µ—Å—Ç–∏ –≤ –∏–≥—Ä–µ /ping");
console.log("");

try {
  // Reset state for clean test
  global.state = {};
  eval(libraryCode);
  
  // Simulate player input
  const inputCode = fs.readFileSync(path.join(__dirname, 'input.js'), 'utf8');
  const playerInput = "/ping";
  const wrappedInputCode = `(function() { const text = "${playerInput}"; ${inputCode} })()`;
  const inputResult = eval(wrappedInputCode);
  
  console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç input.js:");
  console.log("  - text: \"" + inputResult.text + "\"");
  console.log("  - stop: " + inputResult.stop);
  console.log("");
  
  // Check that text is empty and stop is true
  const textNotInHistory = inputResult.text === "" && inputResult.stop === true;
  console.log("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –¢–µ–∫—Å—Ç /ping –ù–ï –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é:", textNotInHistory);
  
  // Simulate AI output turn
  const outputCode = fs.readFileSync(path.join(__dirname, 'output.js'), 'utf8');
  const aiResponse = "The story continues...";
  const wrappedOutputCode = `(function() { const text = "${aiResponse}"; ${outputCode} })()`;
  const outputResult = eval(wrappedOutputCode);
  
  console.log("");
  console.log("–í—ã–≤–æ–¥ –∏–≥—Ä—ã:");
  console.log("----------------------------------------");
  console.log(outputResult.text);
  console.log("----------------------------------------");
  console.log("");
  
  // Verify output contains ‚ü¶SYS‚üß Pong!
  const hasSysMessage = outputResult.text.includes("‚ü¶SYS‚üß Pong!");
  console.log("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç '‚ü¶SYS‚üß Pong!':", hasSysMessage);
  
  if (textNotInHistory && hasSysMessage) {
    console.log("");
    console.log("‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù!");
  } else {
    console.log("");
    console.log("‚ùå –¢–ï–°–¢ 1 –ù–ï –ü–†–û–ô–î–ï–ù!");
    process.exit(1);
  }
} catch (error) {
  console.error("‚ùå –¢–ï–°–¢ 1 –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô:", error.message);
  process.exit(1);
}

console.log("");
console.log("");

console.log("==============================================================");
console.log("–¢–ï–°–¢ 2: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (/fly)");
console.log("==============================================================");
console.log("–î–µ–π—Å—Ç–≤–∏–µ: –í–≤–µ—Å—Ç–∏ –≤ –∏–≥—Ä–µ /fly");
console.log("");

try {
  // Reset state for clean test
  global.state = {};
  eval(libraryCode);
  
  // Simulate player input
  const inputCode = fs.readFileSync(path.join(__dirname, 'input.js'), 'utf8');
  const playerInput = "/fly";
  const wrappedInputCode = `(function() { const text = "${playerInput}"; ${inputCode} })()`;
  const inputResult = eval(wrappedInputCode);
  
  console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç input.js:");
  console.log("  - text: \"" + inputResult.text + "\"");
  console.log("  - stop: " + inputResult.stop);
  console.log("");
  
  // Simulate AI output turn
  const outputCode = fs.readFileSync(path.join(__dirname, 'output.js'), 'utf8');
  const aiResponse = "The story continues...";
  const wrappedOutputCode = `(function() { const text = "${aiResponse}"; ${outputCode} })()`;
  const outputResult = eval(wrappedOutputCode);
  
  console.log("–í—ã–≤–æ–¥ –∏–≥—Ä—ã:");
  console.log("----------------------------------------");
  console.log(outputResult.text);
  console.log("----------------------------------------");
  console.log("");
  
  // Verify output contains Unknown command: "/fly"
  const hasErrorMessage = outputResult.text.includes("‚ü¶SYS‚üß Unknown command: \"/fly\"");
  console.log("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞: –í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç '‚ü¶SYS‚üß Unknown command: \"/fly\"':", hasErrorMessage);
  
  if (hasErrorMessage) {
    console.log("");
    console.log("‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù!");
  } else {
    console.log("");
    console.log("‚ùå –¢–ï–°–¢ 2 –ù–ï –ü–†–û–ô–î–ï–ù!");
    process.exit(1);
  }
} catch (error) {
  console.error("‚ùå –¢–ï–°–¢ 2 –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô:", error.message);
  process.exit(1);
}

console.log("");
console.log("");

console.log("==============================================================");
console.log("–¢–ï–°–¢ 3: –û–±—ã—á–Ω—ã–π –≤–≤–æ–¥ (> –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ–∏ —Ä—É–∫–∏)");
console.log("==============================================================");
console.log("–î–µ–π—Å—Ç–≤–∏–µ: –í–≤–µ—Å—Ç–∏ –≤ –∏–≥—Ä–µ > –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ–∏ —Ä—É–∫–∏");
console.log("");

try {
  // Reset state for clean test
  global.state = {};
  eval(libraryCode);
  
  // Simulate player input
  const inputCode = fs.readFileSync(path.join(__dirname, 'input.js'), 'utf8');
  const playerInput = "> –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ–∏ —Ä—É–∫–∏";
  // We need to properly escape the text for eval
  const wrappedInputCode = `(function() { const text = \`${playerInput}\`; ${inputCode} })()`;
  const inputResult = eval(wrappedInputCode);
  
  console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç input.js:");
  console.log("  - text: \"" + inputResult.text + "\"");
  console.log("  - stop: " + (inputResult.stop || "undefined") );
  console.log("");
  
  // Check that "> " was removed
  const prefixRemoved = inputResult.text === "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ–∏ —Ä—É–∫–∏";
  const noStop = !inputResult.stop;
  
  console.log("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü—Ä–µ—Ñ–∏–∫—Å '> ' —É–¥–∞–ª–µ–Ω:", prefixRemoved);
  console.log("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –¢–µ–∫—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –ò–ò (stop != true):", noStop);
  console.log("");
  console.log("–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–π–¥–µ—Ç –≤ –ò–ò: \"" + inputResult.text + "\"");
  
  if (prefixRemoved && noStop) {
    console.log("");
    console.log("‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù!");
  } else {
    console.log("");
    console.log("‚ùå –¢–ï–°–¢ 3 –ù–ï –ü–†–û–ô–î–ï–ù!");
    process.exit(1);
  }
} catch (error) {
  console.error("‚ùå –¢–ï–°–¢ 3 –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô:", error.message);
  console.error(error.stack);
  process.exit(1);
}

console.log("");
console.log("");
console.log("==============================================================");
console.log("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢");
console.log("==============================================================");
console.log("‚úÖ –¢–ï–°–¢ 1: /ping –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
console.log("‚úÖ –¢–ï–°–¢ 2: /fly –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É");
console.log("‚úÖ –¢–ï–°–¢ 3: –û–±—ã—á–Ω—ã–π –≤–≤–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
console.log("");
console.log("üéâ –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –ü–†–ò–ï–ú–ö–ò –í–´–ü–û–õ–ù–ï–ù–´!");
console.log("");
console.log("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:");
console.log("  ‚úì CommandsRegistry —Å–æ–∑–¥–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
console.log("  ‚úì LC.registerCommand() —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã");
console.log("  ‚úì LC.sanitizeInput() –æ—á–∏—â–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç '>  '");
console.log("  ‚úì /ping –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞");
console.log("  ‚úì input.js –ø–∞—Ä—Å–∏—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã");
console.log("  ‚úì –ö–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä—ã");
console.log("  ‚úì –û–±—ã—á–Ω—ã–π –≤–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ");
console.log("");
console.log("–ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É! üöÄ");
