// === INPUT MODIFIER v17.0.0-phase1 ===

const modifier = function (text) {
  const __SCRIPT_SLOT__ = "Input";
  const __VERSION__ = "17.0.0-phase1";

  // Check if LC is available
  if (typeof LC === "undefined" || typeof LC.lcInit !== "function") {
    console.log("[INPUT] LC not available (expected on first load)");
    return { text: String(text || "") };
  }

  const L = LC.lcInit();
  const inputText = String(text || "");
  
  // Determine action type based on input
  // In AI Dungeon, different action types may be provided via info.actionType
  // For now, we detect based on content or default to "story"
  var actionType = "story";
  
  // Check if info.actionType exists (AI Dungeon provides this)
  if (typeof info !== "undefined" && info && info.actionType) {
    actionType = String(info.actionType);
  } else if (inputText.trim().charAt(0) === "/") {
    actionType = "command";
  }
  
  // Update current action tracking
  LC.updateCurrentAction(actionType, inputText);
  
  console.log("[INPUT] Turn: " + L.turn + " | Type: " + actionType + " | Length: " + inputText.length);
  
  // Check for commands
  if (inputText.trim().charAt(0) === "/") {
    const cmdResult = LC.CommandsRegistry.execute(inputText);
    
    if (cmdResult !== null) {
      console.log("[INPUT] Command executed: " + inputText.split(/\s+/)[0]);
      // Add command result to drafts to be displayed in output
      LC.Drafts.add(cmdResult, 100); // High priority
      // Clear input so command doesn't pass to AI
      return { text: "" };
    }
  }
  
  // Passthrough: return input unchanged
  return { text: inputText };
};

return modifier(text);
