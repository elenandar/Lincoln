// === PROJECT LINCOLN v17 - LIBRARY ===
// Version: 17.0.4 (Phase 1 Final Hotfix)

(function () {
  // Гарантируем однократное выполнение
  if (state.shared && state.shared.LC) {
    return;
  }

  // Создаем LC в state.shared - это каноничный способ для AI Dungeon
  state.shared.LC = {
    Tools: {
      toNum: (x, d = 0) => (typeof x === 'number' && !isNaN(x)) ? x : (Number(x) || d),
      toStr: (x) => String(x == null ? "" : x),
    },
    _msgs: [],
    sysMsg: function(text) {
      if (text) this._msgs.push({ text });
    },
    consumeMsgs: function() {
      return this._msgs.splice(0);
    },
    replyStop: function(msg) {
      this.sysMsg(`⟦SYS⟧ ${msg}`);
      return { text: '', stop: true };
    },
    CommandsRegistry: new Map(),
    lcInit: function(scriptName = 'Unknown') {
      state.lincoln = state.lincoln || {};
      if (!state.lincoln.version) {
        state.lincoln.version = '17.0.4';
        state.lincoln.turn = 0;
        state.lincoln.characters = {};
        state.lincoln.relations = {};
        state.lincoln.hierarchy = {};
      }
      const action = (typeof globalThis.action !== 'undefined') ? globalThis.action : {};
      state.lincoln.currentAction = {
        type: action.type || 'story',
        input: action.input || ''
      };
      return state.lincoln;
    },
    Turns: {
      get: () => state.lincoln.turn || 0,
      inc: () => { state.lincoln.turn = (state.lincoln.turn || 0) + 1; },
      set: (n) => { state.lincoln.turn = Math.max(0, state.shared.LC.Tools.toNum(n)); }
    }
  };

  // Регистрация команд
  const { CommandsRegistry: REG, replyStop, Turns } = state.shared.LC;
  REG.set('/ping', {
    description: '/ping — Проверяет, работает ли система.',
    handler: () => replyStop('Pong!')
  });
  REG.set('/turn', {
    description: '/turn — Показывает текущий ход.',
    handler: () => replyStop(`Текущий ход: ${Turns.get()}`)
  });
  REG.set('/debug', {
    description: '/debug — Показывает текущее состояние state.lincoln.',
    handler: () => {
      try {
        const debugString = JSON.stringify(state.lincoln, null, 2);
        state.shared.LC.sysMsg('== DEBUG: state.lincoln ==\n' + debugString);
      } catch (e) {
        state.shared.LC.sysMsg('Ошибка при сериализации state.lincoln: ' + e.message);
      }
      return { text: '', stop: true };
    }
  });
})();
