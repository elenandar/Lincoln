======================================================================
        PROJECT LINCOLN: SYSTEM ARCHITECTURE (v16-hardened)
======================================================================
Document ID: PL-ARCH-20251012-2139
Author: Copilot
Recipient: @elenandar
Subject: Полное описание архитектуры и внутренних систем скриптов v16.

Этот документ описывает финальную архитектуру скриптов "Проекта 'Линкольн'"
версии 16, включая все движки, подсистемы и их взаимодействие.
Он служит технической документацией для будущей разработки.

---
### **Часть 1: Общая Архитектура и Жизненный Цикл**
---

Система состоит из четырех скриптов, которые выполняются на разных
этапах обработки одного игрового хода:

1.  **`Input.js` (Модификатор Ввода):**
    *   **Триггер:** Срабатывает первым, когда игрок вводит текст и нажимает
        "Отправить".
    *   **Задача:** Анализирует ввод. Отличает игровые команды (начинаются с `/`)
        от обычных действий. Вызывает соответствующие функции из `Library.js`.
        Подготавливает текст для дальнейшей обработки.

2.  **`Context.js` (Модификатор Контекста):**
    *   **Триггер:** Срабатывает вторым, после `Input.js`.
    *   **Задача:** Формирует "контекст" — блок текста, который будет отправлен
        нейронной сети (ИИ). Для этого он вызывает главный сборщик контекста
        `LC.composeContextOverlay()` из `Library.js`. Содержит "усиленный
        протокол" для защиты от утечек данных при `Retry` и `Continue`.

3.  **`Output.js` (Модификатор Вывода):**
    *   **Триггер:** Срабатывает последним, после того как ИИ сгенерировал
        ответ.
    *   **Задача:** Обрабатывает и форматирует текст, полученный от ИИ, перед
        тем как показать его игроку. Может извлекать из ответа ИИ специальные
        события, обновлять `state` и т.д.

4.  **`Library.js` (Библиотека):**
    *   **Триггер:** Не является модификатором. Загружается один раз при
        старте игры и предоставляет набор функций (API) для остальных
        скриптов.
    *   **Задача:** Содержит всю основную логику, состояние и "движки" игры.
        Является мозгом всей системы.

---
### **Часть 2: `Library.js` — Ядро Системы**
---

`Library.js` содержит глобальный объект `LC` (Lincoln Core), в котором
инкапсулированы все подсистемы ("движки").

#### **2.1. `LC.lcInit()` — Инициализация и Состояние**

*   **Назначение:** Главная функция, вызываемая в начале каждого модификатора
    для инициализации и получения доступа к состоянию.
*   **Механизм:** Создает и поддерживает главный объект состояния `state.lincoln`,
    где хранятся все переменные игры. Гарантирует, что все движки имеют
    доступ к актуальным данным.

#### **2.2. `LC.CommandsRegistry` — Движок Команд**

*   **Назначение:** Управляет регистрацией и выполнением всех игровых команд
    (например, `/help`, `/stats`, `/time`).
*   **Ключевые Функции:**
    *   `LC.CommandsRegistry.register(command)`: Добавляет новую команду в реестр.
    *   `LC.CommandsRegistry.execute(commandName, args)`: Находит и выполняет
        команду из реестра.
*   **Механизм:** `Input.js` обнаруживает ввод, начинающийся с `/`, извлекает
    имя команды и передает его в `execute`. Это позволяет легко добавлять
    новые команды, не меняя код `Input.js`.

#### **2.3. `LC.TimeEngine` — Движок Времени**

*   **Назначение:** Отвечает за течение внутриигрового времени.
*   **Ключевые Функции:**
    *   `LC.TimeEngine.advance()`: Основная функция, которая "прокручивает" время
        вперед на один ход.
*   **Механизм:** Отслеживает `state.lincoln.turn` (счетчик ходов). На основе
    счетчика ходов вычисляет текущее время суток (`Morning`, `Day`, `Evening`, `Night`),
    день недели, неделю и сезон. Эта информация используется другими движками
    для создания событий.

#### **2.4. `LC.EventsEngine` — Движок Событий**

*   **Назначение:** Создание, управление и обработка сюжетных событий.
*   **Ключевые Функции:**
    *   `LC.EventsEngine.create(eventData)`: Создает новое событие и помещает
        его в очередь `state.lincoln.events`.
    *   `LC.Utils.getEventDramaticMultiplier(eventType)`: Вспомогательная функция,
        которая определяет "драматичность" события (например, "публичное
        обвинение" более драматично, чем "дружеская встреча").
*   **Механизм:** События могут создаваться как программно (например, `TimeEngine`
    может создать событие "начало нового дня"), так и парситься из ответа ИИ
    в `Output.js`. Движок придает событиям вес и контекст.

#### **2.5. `LC.GossipEngine` — Движок Слухов**

*   **Назначение:** Моделирование распространения информации в игровом мире.
*   **Ключевые Функции:**
    *   `LC.GossipEngine.generateRumorId()`: Создает уникальный идентификатор
        для нового слуха.
    *   `LC.GossipEngine.spread(rumor)`: Логика распространения слуха между
        персонажами.
*   **Механизм:** Когда происходит значимое событие, `EventsEngine` может
    попросить `GossipEngine` создать на его основе слух. Слухи хранятся в
    `state.lincoln.gossip` и со временем "затухают" или распространяются,
    влияя на отношения персонажей.

#### **2.6. `LC.RelationshipEngine` — Движок Отношений**

*   **Назначение:** Отслеживание и изменение социальных связей между персонажами.
*   **Ключевые Функции:**
    *   `LC.RelationshipEngine.get(charA, charB)`: Получает текущий статус
        и счет отношений между двумя персонажами.
    *   `LC.RelationshipEngine.modify(charA, charB, value)`: Изменяет счет
        отношений.
*   **Механизм:** Хранит матрицу отношений в `state.lincoln.relationships`.
    События, созданные `EventsEngine`, или действия игрока могут вызывать
    функцию `modify` для улучшения или ухудшения отношений.

#### **2.7. `LC.composeContextOverlay()` — Сборщик Контекста**

*   **Назначение:** Самая сложная и важная часть `Library.js`. Собирает всю
    релевантную информацию в единый текстовый блок для отправки ИИ.
*   **Механизм:** Последовательно выполняет следующие шаги:
    1.  Достает основную информацию из `state.memory` (`frontMemory` и `authorsNote`).
    2.  Добавляет активные записи из `worldInfo`.
    3.  Добавляет информацию о ключевых персонажах и их текущем состоянии.
    4.  Добавляет информацию о недавних значимых событиях из `EventsEngine`.
    5.  Добавляет недавнюю историю диалогов и действий из `state.story.actions`
        и `state.story.results`.
    6.  Форматирует все это с помощью специальных тегов (например, `⟦...⟧`),
        чтобы помочь ИИ понять структуру данных.
    7.  Обрезает финальный текст до установленного лимита символов.

#### **2.8. `LC.Utils` — Утилиты**

*   **Назначение:** Набор вспомогательных функций общего назначения.
*   **Примеры:**
    *   `sanitizeAliases`: Очищает массивы от дубликатов, пустых значений и мусора.
    *   `findInWorldInfo`: Осуществляет поиск по `worldInfo`.
    *   Функции для работы со строками, числами и структурами данных.

---
### **Часть 3: "Симулякр" и "Легион" — Тестовая Инфраструктура**
---

Помимо игровых скриптов, проект включает мощную тестовую инфраструктуру,
необходимую для стабильной разработки.

*   **`simulacrum/test_harness.js` ("Симулякр"):** Эмулятор среды AI Dungeon,
    позволяющий запускать скрипты локально. Воспроизводит `state`, `info`,
    `worldInfo` и игровой цикл.

*   **`simulacrum/run_all_tests.js` ("Командный Центр"):** Скрипт для
    автоматического запуска всех тестов.

*   **`simulacrum/tests/` ("Легион"):** Набор автоматизированных тестов,
    разделенных на три уровня:
    1.  **`unit/`:** Проверяют внутренние функции `Library.js` в изоляции.
    2.  **`integration/`:** Проверяют полный цикл работы скриптов в ответ
        на действия игрока, включая хаотичные сценарии.
    3.  **`endurance/`:** Проверяют стабильность системы в ходе долгой
        игровой сессии.

======================================================================
```

Документ готов и сохранен в твоем репозитории. Он послужит надежным фундаментом и справочником для создания "версии 17". Мы готовы начать, когда ты отдашь приказ.