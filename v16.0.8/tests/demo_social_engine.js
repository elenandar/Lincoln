#!/usr/bin/env node
/**
 * Demo: Social Engine (Norms & Hierarchy)
 * 
 * This demo shows how the Social Engine creates emergent social dynamics:
 * - Social norms emerge from group reactions
 * - Characters gain/lose social capital based on their actions
 * - Status changes from member ‚Üí leader or member ‚Üí outcast
 * - Social status affects gossip credibility
 */

console.log("=== Social Engine Demo ===\n");
console.log("This demo simulates a school drama where social norms emerge");
console.log("and characters rise or fall in the social hierarchy.\n");

const fs = require('fs');
const path = require('path');
const libraryCode = fs.readFileSync(path.join(__dirname, '..', 'Library v16.0.8.patched.txt'), 'utf8');
global.state = { lincoln: {} };
const toNum = (x, d = 0) => (typeof x === 'number' && !isNaN(x)) ? x : (Number(x) || d);
const toStr = (x) => String(x == null ? "" : x);
const toBool = (x, d = false) => (x == null ? d : !!x);
eval(libraryCode);

const L = LC.lcInit();
L.turn = 1;

// Setup: Three main characters
console.log("=".repeat(60));
console.log("SETUP: Lincoln Heights School Drama");
console.log("=".repeat(60));
console.log("\nThree students with different personalities:\n");

L.characters = {
  '–≠—à–ª–∏': {
    mentions: 20,
    lastSeen: L.turn,
    type: 'SECONDARY',
    status: 'ACTIVE',
    social: {
      status: 'member',
      capital: 100,
      conformity: 0.7
    },
    personality: {
      trust: 0.6,
      bravery: 0.7,
      idealism: 0.8,
      aggression: 0.2
    }
  },
  '–ú–∞–∫—Å–∏–º': {
    mentions: 18,
    lastSeen: L.turn,
    type: 'SECONDARY',
    status: 'ACTIVE',
    social: {
      status: 'member',
      capital: 100,
      conformity: 0.5
    },
    personality: {
      trust: 0.5,
      bravery: 0.5,
      idealism: 0.5,
      aggression: 0.3
    }
  },
  '–õ–µ–æ–Ω–∏–¥': {
    mentions: 15,
    lastSeen: L.turn,
    type: 'SECONDARY',
    status: 'ACTIVE',
    social: {
      status: 'member',
      capital: 100,
      conformity: 0.3
    },
    personality: {
      trust: 0.4,
      bravery: 0.6,
      idealism: 0.3,
      aggression: 0.7
    }
  }
};

// Setup relationships
L.evergreen = {
  relations: {
    '–≠—à–ª–∏': { '–ú–∞–∫—Å–∏–º': 60, '–õ–µ–æ–Ω–∏–¥': 20 },
    '–ú–∞–∫—Å–∏–º': { '–≠—à–ª–∏': 55, '–õ–µ–æ–Ω–∏–¥': 30 },
    '–õ–µ–æ–Ω–∏–¥': { '–≠—à–ª–∏': 15, '–ú–∞–∫—Å–∏–º': 25 }
  }
};

console.log("üë§ –≠—à–ª–∏ - –ü–æ–ø—É–ª—è—Ä–Ω–∞—è —É—á–µ–Ω–∏—Ü–∞ (–≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ñ–æ—Ä–º–Ω–æ—Å—Ç—å)");
console.log("   Capital: 100, Conformity: 0.7");
console.log("\nüë§ –ú–∞–∫—Å–∏–º - –û–±—ã—á–Ω—ã–π —É—á–µ–Ω–∏–∫ (—Å—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Ñ–æ—Ä–º–Ω–æ—Å—Ç—å)");
console.log("   Capital: 100, Conformity: 0.5");
console.log("\nüë§ –õ–µ–æ–Ω–∏–¥ - –ë—É–Ω—Ç–∞—Ä—å (–Ω–∏–∑–∫–∞—è –∫–æ–Ω—Ñ–æ—Ä–º–Ω–æ—Å—Ç—å)");
console.log("   Capital: 100, Conformity: 0.3");

// ========== ACT 1: Positive Actions Build Capital ==========
console.log("\n" + "=".repeat(60));
console.log("ACT 1: Building Social Capital");
console.log("=".repeat(60));

console.log("\nüìñ –≠—à–ª–∏ –ø–æ–º–æ–≥–∞–µ—Ç –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫—É —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º.");
LC.HierarchyEngine.updateCapital('–≠—à–ª–∏', { type: 'POSITIVE_ACTION' });

console.log("üìñ –≠—à–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç —à–∫–æ–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.");
LC.HierarchyEngine.updateCapital('–≠—à–ª–∏', { type: 'POSITIVE_ACTION' });

console.log("üìñ –≠—à–ª–∏ –µ—â–µ —Ä–∞–∑ –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–º—É-—Ç–æ.");
LC.HierarchyEngine.updateCapital('–≠—à–ª–∏', { type: 'POSITIVE_ACTION' });

console.log("üìñ –≠—à–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ–π.");
LC.HierarchyEngine.updateCapital('–≠—à–ª–∏', { type: 'POSITIVE_ACTION' });

console.log("üìñ –≠—à–ª–∏ –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç–µ–ª—é.");
LC.HierarchyEngine.updateCapital('–≠—à–ª–∏', { type: 'POSITIVE_ACTION' });

console.log("üìñ –≠—à–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –∑–∞ –¥–æ–±—Ä–æ—Ç—É.");
LC.HierarchyEngine.updateCapital('–≠—à–ª–∏', { type: 'POSITIVE_ACTION' });

console.log("\nüìä Social Capital after positive actions:");
console.log(`   –≠—à–ª–∏: ${L.characters['–≠—à–ª–∏'].social.capital}`);
console.log(`   –ú–∞–∫—Å–∏–º: ${L.characters['–ú–∞–∫—Å–∏–º'].social.capital}`);
console.log(`   –õ–µ–æ–Ω–∏–¥: ${L.characters['–õ–µ–æ–Ω–∏–¥'].social.capital}`);

// ========== ACT 2: Status Recalculation ==========
console.log("\n" + "=".repeat(60));
console.log("ACT 2: First Status Recalculation");
console.log("=".repeat(60));

console.log("\n‚öñÔ∏è Recalculating social hierarchy...\n");
LC.HierarchyEngine.recalculateStatus();

console.log("\nüìä New Social Statuses:");
console.log(`   –≠—à–ª–∏: ${L.characters['–≠—à–ª–∏'].social.status} (capital: ${L.characters['–≠—à–ª–∏'].social.capital})`);
console.log(`   –ú–∞–∫—Å–∏–º: ${L.characters['–ú–∞–∫—Å–∏–º'].social.status} (capital: ${L.characters['–ú–∞–∫—Å–∏–º'].social.capital})`);
console.log(`   –õ–µ–æ–Ω–∏–¥: ${L.characters['–õ–µ–æ–Ω–∏–¥'].social.status} (capital: ${L.characters['–õ–µ–æ–Ω–∏–¥'].social.capital})`);

// ========== ACT 3: Negative Actions Lose Capital ==========
console.log("\n" + "=".repeat(60));
console.log("ACT 3: –õ–µ–æ–Ω–∏–¥'s Downfall");
console.log("=".repeat(60));

console.log("\nüìñ –õ–µ–æ–Ω–∏–¥ —Å—Å–æ—Ä–∏—Ç—Å—è —Å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–º.");
LC.HierarchyEngine.updateCapital('–õ–µ–æ–Ω–∏–¥', { type: 'NEGATIVE_ACTION' });

console.log("üìñ –õ–µ–æ–Ω–∏–¥ –≥—Ä—É–±–∏—Ç —É—á–∏—Ç–µ–ª—é.");
LC.HierarchyEngine.updateCapital('–õ–µ–æ–Ω–∏–¥', { type: 'NEGATIVE_ACTION' });

console.log("üìñ –õ–µ–æ–Ω–∏–¥ –Ω–∞—Ä—É—à–∞–µ—Ç —Å–∏–ª—å–Ω—É—é —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –Ω–æ—Ä–º—É (–ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ).");
LC.HierarchyEngine.updateCapital('–õ–µ–æ–Ω–∏–¥', { 
  type: 'NORM_VIOLATION',
  normStrength: 0.9,
  witnessCount: 5
});

console.log("üìñ –õ–µ–æ–Ω–∏–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å.");
LC.HierarchyEngine.updateCapital('–õ–µ–æ–Ω–∏–¥', { type: 'NEGATIVE_ACTION' });

console.log("üìñ –õ–µ–æ–Ω–∏–¥ –Ω–∞—Ä—É—à–∞–µ—Ç –µ—â–µ –æ–¥–Ω—É –Ω–æ—Ä–º—É.");
LC.HierarchyEngine.updateCapital('–õ–µ–æ–Ω–∏–¥', { 
  type: 'NORM_VIOLATION',
  normStrength: 0.7,
  witnessCount: 3
});

console.log("üìñ –õ–µ–æ–Ω–∏–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å –Ω–æ—Ä–º—ã.");
LC.HierarchyEngine.updateCapital('–õ–µ–æ–Ω–∏–¥', { type: 'NEGATIVE_ACTION' });
LC.HierarchyEngine.updateCapital('–õ–µ–æ–Ω–∏–¥', { type: 'NEGATIVE_ACTION' });
LC.HierarchyEngine.updateCapital('–õ–µ–æ–Ω–∏–¥', { type: 'NEGATIVE_ACTION' });
LC.HierarchyEngine.updateCapital('–õ–µ–æ–Ω–∏–¥', { type: 'NEGATIVE_ACTION' });
LC.HierarchyEngine.updateCapital('–õ–µ–æ–Ω–∏–¥', { type: 'NEGATIVE_ACTION' });

console.log("\nüìä Social Capital after –õ–µ–æ–Ω–∏–¥'s actions:");
console.log(`   –≠—à–ª–∏: ${L.characters['–≠—à–ª–∏'].social.capital}`);
console.log(`   –ú–∞–∫—Å–∏–º: ${L.characters['–ú–∞–∫—Å–∏–º'].social.capital}`);
console.log(`   –õ–µ–æ–Ω–∏–¥: ${L.characters['–õ–µ–æ–Ω–∏–¥'].social.capital}`);

// ========== ACT 4: Becoming an Outcast ==========
console.log("\n" + "=".repeat(60));
console.log("ACT 4: Second Status Recalculation");
console.log("=".repeat(60));

console.log("\n‚öñÔ∏è Recalculating social hierarchy...\n");
LC.HierarchyEngine.recalculateStatus();

console.log("\nüìä Final Social Statuses:");
console.log(`   –≠—à–ª–∏: ${L.characters['–≠—à–ª–∏'].social.status} (capital: ${L.characters['–≠—à–ª–∏'].social.capital})`);
console.log(`   –ú–∞–∫—Å–∏–º: ${L.characters['–ú–∞–∫—Å–∏–º'].social.status} (capital: ${L.characters['–ú–∞–∫—Å–∏–º'].social.capital})`);
console.log(`   –õ–µ–æ–Ω–∏–¥: ${L.characters['–õ–µ–æ–Ω–∏–¥'].social.status} (capital: ${L.characters['–õ–µ–æ–Ω–∏–¥'].social.capital})`);

// ========== ACT 5: Impact on Gossip ==========
console.log("\n" + "=".repeat(60));
console.log("ACT 5: Social Status Affects Gossip Credibility");
console.log("=".repeat(60));

// Create a rumor
console.log("\nüìñ A rumor emerges about –ú–∞–∫—Å–∏–º...");
L.rumors = [{
  id: 'rumor_001',
  text: '–ú–∞–∫—Å–∏–º –ø–æ–ª—É—á–∏–ª –¥–≤–æ–π–∫—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ',
  type: 'academic_failure',
  subject: '–ú–∞–∫—Å–∏–º',
  target: null,
  spin: 'neutral',
  turn: L.turn,
  knownBy: ['–≠—à–ª–∏', '–õ–µ–æ–Ω–∏–¥'],
  distortion: 0,
  verified: false,
  status: 'ACTIVE'
}];

console.log("\nüó£Ô∏è –≠—à–ª–∏ (leader) tries to spread the rumor...");
let spreadCount = 0;
for (let i = 0; i < 10; i++) {
  const beforeCount = L.rumors[0].knownBy.length;
  // Simulate spreading to a new person
  L.rumors[0].knownBy = ['–≠—à–ª–∏', '–õ–µ–æ–Ω–∏–¥']; // Reset
  const testChar = 'TestChar' + i;
  L.characters[testChar] = { mentions: 1, lastSeen: L.turn, status: 'ACTIVE' };
  
  // Try to spread from –≠—à–ª–∏
  LC.GossipEngine.Propagator.spreadRumor('rumor_001', '–≠—à–ª–∏', testChar);
  if (L.rumors[0].knownBy.includes(testChar)) spreadCount++;
}
console.log(`   Success rate: ${spreadCount}/10 attempts (expected ~15/10 with 1.5x multiplier)`);

console.log("\nüó£Ô∏è –õ–µ–æ–Ω–∏–¥ (outcast) tries to spread the same rumor...");
L.rumors[0].knownBy = ['–≠—à–ª–∏', '–õ–µ–æ–Ω–∏–¥']; // Reset
spreadCount = 0;
for (let i = 0; i < 10; i++) {
  const testChar = 'TestChar2_' + i;
  L.characters[testChar] = { mentions: 1, lastSeen: L.turn, status: 'ACTIVE' };
  
  // Try to spread from –õ–µ–æ–Ω–∏–¥
  LC.GossipEngine.Propagator.spreadRumor('rumor_001', '–õ–µ–æ–Ω–∏–¥', testChar);
  if (L.rumors[0].knownBy.includes(testChar)) spreadCount++;
}
console.log(`   Success rate: ${spreadCount}/10 attempts (expected ~2/10 with 0.2x multiplier)`);

// ========== ACT 6: Context Overlay ==========
console.log("\n" + "=".repeat(60));
console.log("ACT 6: Context Overlay Shows Status");
console.log("=".repeat(60));

console.log("\nüé≠ Generating AI context overlay...\n");
const overlay = LC.composeContextOverlay({});
const overlayText = overlay.text || '';

// Extract STATUS tags
const statusMatches = overlayText.match(/‚ü¶STATUS:[^‚üß]+‚üß[^‚ü¶]*/g);
if (statusMatches && statusMatches.length > 0) {
  console.log("üìã STATUS Tags in Context:");
  statusMatches.forEach(match => {
    console.log(`   ${match.trim()}`);
  });
} else {
  console.log("üìã STATUS Tags in Context:");
  console.log("   (Characters must be in HOT window to show STATUS tags)");
  console.log("   Current statuses:");
  console.log(`   - –≠—à–ª–∏: ${L.characters['–≠—à–ª–∏'].social.status}`);
  console.log(`   - –õ–µ–æ–Ω–∏–¥: ${L.characters['–õ–µ–æ–Ω–∏–¥'].social.status}`);
}

// ========== Summary ==========
console.log("\n" + "=".repeat(60));
console.log("SUMMARY");
console.log("=".repeat(60));

console.log("\n‚ú® The Social Engine demonstrates:");
console.log("   1. Characters build/lose social capital through actions");
console.log("   2. Status dynamically changes based on capital");
console.log("   3. Leaders have more influence (rumors spread better)");
console.log("   4. Outcasts have less credibility (rumors ignored)");
console.log("   5. Status appears in AI context as ‚ü¶STATUS‚üß tags");

console.log("\nüéØ Final Results:");
console.log(`   –≠—à–ª–∏: ${L.characters['–≠—à–ª–∏'].social.status.toUpperCase()} (${L.characters['–≠—à–ª–∏'].social.capital} capital)`);
console.log(`   –ú–∞–∫—Å–∏–º: ${L.characters['–ú–∞–∫—Å–∏–º'].social.status.toUpperCase()} (${L.characters['–ú–∞–∫—Å–∏–º'].social.capital} capital)`);
console.log(`   –õ–µ–æ–Ω–∏–¥: ${L.characters['–õ–µ–æ–Ω–∏–¥'].social.status.toUpperCase()} (${L.characters['–õ–µ–æ–Ω–∏–¥'].social.capital} capital)`);

console.log("\nüéâ Demo complete!\n");
