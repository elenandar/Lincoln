/*
Module: Context â€” Lincoln v16.0.8-compat6d
Contract:
- Reads flags: ...
- Writes flags: ...
- Entry points: ...
- Invariants: recap/epoch reset only on non-command path; retry baseline preserved; command bypass on marked handlers.
- Config: LIMITS.*, CHAR_WINDOW_*, FEATURES.*, OUTPUT_BUDGET_MS (optional)
*/
// === CONTEXT MODIFIER v16.0.8-compat6d ===
const __SCRIPT_SLOT__ = "Context";
if (typeof LC !== "undefined") LC.DATA_VERSION = "16.0.8-compat6d";

const modifier = function (text) {
  
  if (typeof LC === "undefined") return { text: String(text || "") };
  LC.lcInit?.();
  const RETRY_KEEP_CONTEXT = (LC.lcGetFlag?.('RETRY_KEEP_CONTEXT', false) === true);
  LC.DATA_VERSION = "16.0.8-compat6d";
  const L = LC.lcInit(__SCRIPT_SLOT__);

  const isRetry = LC.lcGetFlag("isRetry", false);
  if (isRetry && !RETRY_KEEP_CONTEXT) return { text: String(text || "") };

  const isCmd = LC.lcGetFlag("isCmd", false);

  const limit = (LC.CONFIG && LC.CONFIG.LIMITS && LC.CONFIG.LIMITS.CONTEXT_LENGTH) || 800;
  const built = LC.composeContextOverlay?.({ limit, allowPartial: true });
  const overlayRaw = (built && typeof built.text === "string") ? built.text : String(built?.text || "");
  const overlay = overlayRaw.length > limit ? overlayRaw.slice(0, limit) : overlayRaw;

  return { text: overlay };
};
return modifier(text);