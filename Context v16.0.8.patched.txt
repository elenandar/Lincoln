/*
Module: Context — Lincoln v16.0.8-compat6d
Contract:
- Reads flags: ...
- Writes flags: ...
- Entry points: ...
- Invariants: recap/epoch reset only on non-command path; retry baseline preserved; command bypass on marked handlers.
- Config: LIMITS.*, CHAR_WINDOW_*, FEATURES.*, OUTPUT_BUDGET_MS (optional)
*/
// === CONTEXT MODIFIER v16.0.8-compat6d ===
const __SCRIPT_SLOT__ = "Context";
if (typeof LC !== "undefined") LC.DATA_VERSION = "16.0.8-compat6d";

const modifier = function (text) {
  
  if (typeof LC === "undefined") return { text: String(text || "") };

  const RETRY_KEEP_CONTEXT = (LC.lcGetFlag?.('RETRY_KEEP_CONTEXT', false) === true);
  LC.DATA_VERSION = "16.0.8-compat6d";
  const L = LC.lcInit(__SCRIPT_SLOT__);

  const isRetry = LC.lcGetFlag?.("isRetry", false) ?? false;
  if (isRetry && !RETRY_KEEP_CONTEXT) return { text: String(text || "") };

  const isCmd = LC.lcGetFlag?.("isCmd", false) ?? false;
  const wantsRecap = LC.lcGetFlag?.("doRecap", false) ?? false;
  const wantsEpoch = LC.lcGetFlag?.("doEpoch", false) ?? false;

  // Если это чистая команда (нет задач на драфты) — не трать бюджет на сборку оверлея
  if (isCmd && !wantsRecap && !wantsEpoch) {
    return { text: String(text || "") };
  }

  const limit = (LC.CONFIG && LC.CONFIG.LIMITS && LC.CONFIG.LIMITS.CONTEXT_LENGTH) || 800;
  // CTX: build overlay with safe fallback to upstream text
  let overlay = "";
  try {
    const built = LC.composeContextOverlay?.({ limit, allowPartial: true });
    const raw = (built && typeof built.text === "string") ? built.text : String(built || "");
    overlay = raw && raw.trim().length ? raw : "";
    if (!overlay) throw new Error("empty overlay");
  } catch (e) {
    LC.lcWarn?.("CTX: overlay build failed or empty: " + (e && e.message));
    // SAFE FALLBACK: preserve upstream context instead of blanking it
    return { text: String(text || "") };
  }
  const overlayLimited = overlay.length > limit ? overlay.slice(0, limit) : overlay;

  return { text: overlayLimited };
};
return modifier(text);
