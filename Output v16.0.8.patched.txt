/*
Module: Output ‚Äî Lincoln v16.0.8-compat6d
Contract:
- Reads flags: ...
- Writes flags: ...
- Entry points: ...
- Invariants: recap/epoch reset only on non-command path; retry baseline preserved; command bypass on marked handlers.
- Config: LIMITS.*, CHAR_WINDOW_*, FEATURES.*, OUTPUT_BUDGET_MS (optional)
*/
// === OUTPUT MODIFIER v16.0.8-compat6d ===
const __SCRIPT_SLOT__ = "Output";
if (typeof LC !== "undefined") LC.DATA_VERSION = "16.0.8-compat6d";

function omBudget(start, maxMs = 3500) {
  const dt = Date.now() - start;
  return { over: dt > maxMs, dt };
}
const modifier = function (text) {
  const t0 = Date.now();
  if (typeof LC === "undefined") return { text: String(text || "") };
  LC.DATA_VERSION = "16.0.8-compat6d";
  const L = LC.lcInit(__SCRIPT_SLOT__);
  let out = String(text || "").trim();
  const clean = LC.lcStripSys(out);

  const CMD_SYS_PREFIX = "\u2063\u2063";
  const CMD_SYS_META_SEP = "\u2062";
  const CMD_CYCLE_FLAG = "__cmdCyclePending";

  function decodeCommandSys(raw) {
    if (typeof raw !== "string") return null;
    if (!raw.startsWith(CMD_SYS_PREFIX)) return null;
    const metaEnd = raw.indexOf(CMD_SYS_META_SEP, CMD_SYS_PREFIX.length);
    if (metaEnd <= CMD_SYS_PREFIX.length) return null;
    const meta = raw.slice(CMD_SYS_PREFIX.length, metaEnd);
    const text = raw.slice(metaEnd + CMD_SYS_META_SEP.length);
    const [turnStr, seqStr] = meta.split(":");
    const turn = Number.parseInt(turnStr, 10);
    const seq = Number.parseInt(seqStr, 10);
    if (!Number.isFinite(turn) || !Number.isFinite(seq)) {
      return { text };
    }
    return { text, turn, seq };
  }


  const isCmd = LC.lcGetFlag("isCmd", false);
  const cmdCyclePending = LC.lcGetFlag(CMD_CYCLE_FLAG, false);
  const isRetry = LC.lcGetFlag("isRetry", false);
  const wantsRecap = LC.lcGetFlag("doRecap", false);
  const wantsEpoch = LC.lcGetFlag("doEpoch", false);
  // Derive lastActionType for analysis
  const lastActionType =
    (L && L.lastActionType) ||
    (isRetry ? "retry" : (LC.lcGetFlag?.("isCmd", false) ? "command" : "story"));
  const isCommandAction = lastActionType === "command" || cmdCyclePending || isCmd;

  if (LC.lcGetFlag?.("isCmd", false) && (LC.lcGetFlag?.("doRecap", false) || LC.lcGetFlag?.("doEpoch", false))) {
    LC.lcWarn?.("Command+TASK collision: check /–¥–∞ handler clears isCmd before Context.");
  }

  // T1: Accept drafts requested by /continue
  try {
    const wantAccept = LC.lcGetFlag?.("acceptDraft", false);
    if (wantAccept) {
      LC.lcSetFlag?.("acceptDraft", false);

      // Recap draft
      if (L.recapDraft && L.recapDraft.text) {
        try {
          let savedCount = 0;
          if (typeof LC.syncRecapToStoryCards === "function") {
            savedCount = LC.syncRecapToStoryCards(L.recapDraft.text, L.recapDraft.window) | 0;
          }
          L.lastRecapTurn = L.recapDraft.turn || L.turn;
          L.recapDraft = null;
          LC.lcSys?.(`‚úÖ Recap saved${savedCount ? ` (${savedCount} card${savedCount===1?'':'s'})` : ""}.`);
        } catch (e) {
          LC.lcWarn?.("Recap save failed: " + (e && e.message));
        }
      }

      // Epoch draft
      if (L.epochDraft && L.epochDraft.text) {
        try {
          L.lastEpochTurn = L.epochDraft.turn || L.turn;
          L.epochDraft = null;
          LC.lcSys?.("‚úÖ Epoch accepted.");
        } catch (e) {
          LC.lcWarn?.("Epoch accept failed: " + (e && e.message));
        }
      }
    }
  } catch (e) {
    LC.lcWarn?.("AcceptDraft handling failed: " + (e && e.message));
  }

  // Opening ‚Äî –ø–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞—Ö–≤–∞—Ç
  if (L.turn === 0 && !L.openingCaptured && !isRetry && clean.length > 20) {
    LC.captureOpeningFromOutput(clean);
  }

  // –ö–æ–º–∞–Ω–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ /continue ‚Üí SYS
  if (isCmd || cmdCyclePending) {
    const msgs = (LC.lcConsumeMsgs?.() || []).map(msg => {
      const decoded = decodeCommandSys(msg);
      return decoded ? decoded.text : msg;
    });
    try { LC.lcSetFlag?.(CMD_CYCLE_FLAG, false); } catch (_) {}
    LC.Flags?.clearCmd?.(); // —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π —Å–±—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–µ ¬´–∑–∞–ª–∏–ø–Ω—É—Ç—å¬ª –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ
    return { text: (msgs.length ? msgs.join("\n") + "\n" + "=".repeat(40) + "\n" : (LC.CONFIG.CMD_PLACEHOLDER || "‚ü¶SYS‚üß OK.") + "\n") };
  }

  if (wantsRecap) LC.lcSetFlag("doRecap", false);
  if (wantsEpoch) LC.lcSetFlag("doEpoch", false);

  // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Ö–æ–¥–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
  if (!isRetry && !isCommandAction && LC.shouldIncrementTurn()) {
    LC.incrementTurn();
  }
  L.lastOutput = clean;

  // Anti-echo
  let filtered = clean;
  if (!isRetry) {
    filtered = LC.applyAntiEcho(clean, L.prevOutput, lastActionType);
    // Only update the anti-echo baseline when not retrying.
    L.prevOutput = filtered;
  }
  out = filtered;

  // –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ (Recap/Epoch)
  const draftSource = out;
  if (wantsRecap) {
    if (draftSource.length > 50) {
      L.recapDraft = { text: draftSource, turn: L.turn, window: [Math.max(0, L.turn - L.cadence), L.turn] };
      L.tm.recaps = (L.tm.recaps || 0) + 1;
      L.tm.recapTurns = Array.isArray(L.tm.recapTurns) ? L.tm.recapTurns : [];
      L.tm.recapTurns.push(L.turn);
      const win = LC.CONFIG.RECAP_V2.AUTO_EPOCH_WINDOW;
      L.tm.recapTurns = L.tm.recapTurns.filter(t0 => (L.turn - t0) <= (win*2));
      LC.lcSys("üìã Recap draft created. Use /continue to save.");
    } else LC.lcSys("‚ùå Recap too short.");
  }
  if (wantsEpoch) {
    if (draftSource.length > 60) {
      L.epochDraft = { text: draftSource, turn: L.turn, window: [L.lastEpochTurn || 0, L.turn] };
      L.tm.epochs = (L.tm.epochs || 0) + 1;
      LC.lcSys("üóø Epoch draft created. Use /continue to save.");
    } else LC.lcSys("‚ùå Epoch too short.");
  }

  // –ü–æ—Å—Ç-–∞–Ω–∞–ª–∏–∑ (–Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ö–æ–¥–µ)
  if (!isRetry) {
    try {
      LC.updateCharacterActivity(out, false);
    } catch (e) {
      LC.lcWarn("Post-analyze updateCharacterActivity error: " + (e && e.message));
    }
    try {
      LC.analyzeTextForEvents(out, "output");
    } catch (e) {
      LC.lcWarn("Post-analyze analyzeTextForEvents error: " + (e && e.message));
    }
    const autoEvergreen = LC.autoEvergreen;
    if (autoEvergreen?.analyze) {
      try {
        autoEvergreen.analyze(out, lastActionType);
      } catch (e) {
        LC.lcWarn("Post-analyze autoEvergreen error: " + (e && e.message));
      }
    }
  }

  // –ê–≤—Ç–æ-–æ—Ñ—Ñ–µ—Ä recap –∏ –∞–≤—Ç–æ-epoch
  if (!isRetry) {
    try { LC.checkRecapOfferV2(); } catch(e){ LC.lcWarn("RecapOfferV2 error: " + (e && e.message)); }
    try { LC.checkAutoEpoch(); }   catch(e){ LC.lcWarn("AutoEpoch error: " + (e && e.message)); }
  }

  // SYS: –í–°–ï–ì–î–ê consume; –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ sysShow=true –∏ —ç—Ç–æ –Ω–µ retry
  const budget = omBudget(t0, LC.CONFIG?.LIMITS?.OUTPUT_BUDGET_MS ?? 3500);
  if (budget.over) LC.lcWarn?.(`Output budget exceeded: ${budget.dt}ms`);
  const notices = LC.consumeNotices?.() || "";
  let msgs = LC.lcConsumeMsgs?.() || [];
  if (msgs.length) {
    const filtered = [];
    let seenTurn = L._cmdSysSeen?.turn;
    let seenSeq = L._cmdSysSeen?.seq;
    let sawStamped = false;
    for (const rawMsg of msgs) {
      const decoded = decodeCommandSys(rawMsg);
      if (!decoded || decoded.turn == null || decoded.seq == null) {
        filtered.push(decoded ? decoded.text : rawMsg);
        continue;
      }
      sawStamped = true;
      const currentTurn = typeof decoded.turn === "number" ? decoded.turn : null;
      const currentSeq = typeof decoded.seq === "number" ? decoded.seq : null;
      const lastTurn = typeof seenTurn === "number" ? seenTurn : -Infinity;
      const lastSeq = typeof seenSeq === "number" ? seenSeq : -Infinity;
      const isStaleTurn = currentTurn < lastTurn;
      const isSameTurn = currentTurn === lastTurn;
      if (isStaleTurn || (isSameTurn && currentSeq <= lastSeq)) {
        continue;
      }
      if (!isSameTurn && currentTurn < (L.turn ?? -Infinity)) {
        continue;
      }
      if (!Number.isFinite(currentTurn) || !Number.isFinite(currentSeq)) {
        continue;
      }
      if (currentTurn > lastTurn || (isSameTurn && currentSeq > lastSeq)) {
        seenTurn = currentTurn;
        seenSeq = currentSeq;
      }
      // –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–∞–ø—Ä—è–º—É—é -> –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    }
    if (sawStamped) {
      L._cmdSysSeen = { turn: seenTurn, seq: seenSeq };
    }
    msgs = filtered;
  }
  let final = out;
  if (L.sysShow && !isRetry) {
    if (msgs.length) final = msgs.join("\n") + "\n" + "=".repeat(40) + "\n" + final;
    if (notices) final = notices + "\n\n" + final;
  }
  return { text: final };
};
return modifier(text);
