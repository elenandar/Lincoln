/*
Module: Input ‚Äî Lincoln v16.0.8-compat6d
Contract:
- Reads flags: ...
- Writes flags: ...
- Entry points: ...
- Invariants:
  - Turn +1 on story input and the UI Continue button.
  - Turn +0 on slash commands (including `/continue`) and retries.
  - `/continue` slash command accepts recap/epoch drafts (not the UI button).
  - Context overlay falls back to upstream text when empty or on error.
- Config: LIMITS.*, CHAR_WINDOW_*, FEATURES.*, OUTPUT_BUDGET_MS (optional)
*/
// === INPUT MODIFIER v16.0.8-compat6d ===
const __SCRIPT_SLOT__ = "Input";
if (typeof LC !== "undefined") LC.DATA_VERSION = "16.0.8-compat6d";

const modifier = function (text) {
  
if (typeof LC === "undefined") return { text: String(text || "") };
  LC.DATA_VERSION = "16.0.8-compat6d";
  const L = LC.lcInit(__SCRIPT_SLOT__);

  if (L.turn === 0 && !L.openingCaptured) LC.captureOpeningFromHistory();

  const raw = String(text || "");
  const userText = LC.stripYouWrappers(raw.trim());

  const CMD_SYS_PREFIX = "\u2063\u2063"; // invisible marker to tag command SYS messages
  const CMD_SYS_META_SEP = "\u2062";
  const CMD_CYCLE_FLAG = "__cmdCyclePending";

  function ensureCommandRegistryBypassGuard() {
    const registry = LC?.Commands;
    if (!registry || typeof registry.set !== "function" || registry.__lcBypassGuard) return;
    const originalSet = registry.set;
    registry.set = function guardedSet(cmdName, definition) {
      let nextDef = definition;
      try {
        const prev = this.get?.(cmdName);
        if (prev && prev.bypass === true) {
          if (nextDef && typeof nextDef === "object") {
            if (nextDef.bypass !== true) {
              let applied = false;
              try {
                nextDef.bypass = true;
                applied = nextDef.bypass === true;
              } catch (_) {}
              if (!applied) {
                nextDef = { ...nextDef, bypass: true };
              }
            }
          } else if (typeof nextDef === "function") {
            nextDef = { handler: nextDef, bypass: true };
          }
        }
      } catch (_) {}
      return originalSet.call(this, cmdName, nextDef);
    };
    registry.__lcBypassGuard = true;
  }

  function stampCommandSysMessage(message) {
    const turn = L?.turn ?? 0;
    const seq = (L._cmdSysSeq = (L._cmdSysSeq || 0) + 1);
    const text = String(message ?? "");
    return {
      raw: `${CMD_SYS_PREFIX}${turn}:${seq}${CMD_SYS_META_SEP}${text}`,
      turn,
      seq,
      text
    };
  }

  function clearCommandFlags(options = {}) {
    const preserveCycle = options && options.preserveCycle === true;
    try {
      LC.Flags?.clearCmd?.(preserveCycle);
    } catch (_) {}
    if (!preserveCycle) {
      try {
        const L = LC.lcInit ? LC.lcInit(__SCRIPT_SLOT__) : {};
        if (L.currentAction) delete L.currentAction.__cmdCyclePending;
      } catch (_) {}
    }
  }

  function setCommandMode(){
    try {
      LC.Flags?.setCmd?.();
      const L = LC.lcInit ? LC.lcInit(__SCRIPT_SLOT__) : {};
      if (L.currentAction) L.currentAction.__cmdCyclePending = true;
    } catch (_) {}
  }
function replyStop(msg){
  try { LC.lcInit?.(__SCRIPT_SLOT__); } catch(_) {}
  const L = LC.lcInit ? LC.lcInit(__SCRIPT_SLOT__) : {};
  if (L.currentAction) L.currentAction.type = 'command';
  const line = LC.sysLine?.(msg) || "";
  try { LC.lcConsumeMsgs?.(); } catch(_) {} // –æ—á–∏—Å—Ç–∫–∞ —Ö–≤–æ—Å—Ç–∞ –æ—á–µ—Ä–µ–¥–∏
  return { text: line ? line + "\n" : "", stop: true };
}

function replyStopSilent(){
  try { LC.lcInit?.(__SCRIPT_SLOT__); } catch(_) {}
  const L = LC.lcInit ? LC.lcInit(__SCRIPT_SLOT__) : {};
  if (L.currentAction) L.currentAction.type = 'command';
  try { LC.lcConsumeMsgs?.(); } catch(_) {}
  return { text: "", stop: true };
}

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è registry (Library)
  LC.replyStop = replyStop;

  function buildHelpMessage(currentL = L) {
    const version = LC?.CONFIG?.VERSION ?? "";
    const lines = [`=== COMMANDS ${version} ===`];
    
    // Auto-generate from LC.CommandsRegistry
    if (LC?.CommandsRegistry && typeof LC.CommandsRegistry.entries === 'function') {
      const entries = Array.from(LC.CommandsRegistry.entries());
      for (const [cmdName, cmdDef] of entries) {
        if (cmdDef && cmdDef.description) {
          lines.push(cmdDef.description);
        }
      }
    }
    
    return lines.join("\n");
  }

  function buildStatsMessage(currentL = L) {
    const activeL = currentL || LC?.lcInit?.(__SCRIPT_SLOT__) || {};
    const tm = activeL.tm || {};
    const lastRecapScore = tm.lastRecapScore;
    const score = (lastRecapScore == null) ? "n/a" : Number(lastRecapScore).toFixed(2);
    const turn = activeL.turn ?? 0;
    const lastRecap = activeL.lastRecapTurn ?? 0;
    const lastEpoch = activeL.lastEpochTurn ?? 0;
    const cadence = activeL.cadence ?? "n/a";
    const worldInfoIds = Array.isArray(activeL.worldInfoIds) ? activeL.worldInfoIds : [];
    const pinnedWorldInfoIds = Array.isArray(activeL.pinnedWorldInfoIds) ? activeL.pinnedWorldInfoIds : [];
    const characters = activeL.characters ? Object.keys(activeL.characters).length : 0;
    const echoHits = tm.echoHits || 0;
    const retryHits = tm.retries || 0;
    const errors = tm.errors || 0;
    const version = LC?.CONFIG?.VERSION ?? "";
    return [
      `=== STATISTICS ${version} ===`,
      `Turn: ${turn}`,
      `Since recap: ${turn - lastRecap}`,
      `Since epoch: ${turn - lastEpoch}`,
      `Cadence: ${cadence}`,
      `Cards: ${worldInfoIds.length} (pinned ${pinnedWorldInfoIds.length})`,
      `Characters: ${characters}`,
      `Echo hits: ${echoHits}`,
      `Retry hits: ${retryHits}`,
      `Errors: ${errors}`,
      `Last recap score: ${score}`
    ].join("\n");
  }

  function ensureSharedCommand(cmdName, builder) {
    if (!LC?.Commands) return;
    ensureCommandRegistryBypassGuard();
    const existing = LC.Commands?.get?.(cmdName);
    if (existing && !existing.bypass && typeof existing.handler === "function") {
      return;
    }
    const prev = LC.Commands?.get?.(cmdName);
    const bypass = (prev && prev.bypass === true) || false;
    LC.Commands.set(cmdName, {
      handler() {
        const ctx = LC?.lcInit?.(__SCRIPT_SLOT__) || LC?.lcInit?.() || L;
        const message = builder(ctx);
        if (typeof LC.replyStop === "function") return LC.replyStop(message);
        return { text: `‚ü¶SYS‚üß ${String(message ?? "")}`, stop: true };
      },
      bypass
    });
  }

  function extractCommand(s){
    let t = (s || "").trim();
    if ((t.startsWith('"') && t.endsWith('"')) || (t.startsWith("'") && t.endsWith("'"))) t = t.slice(1, -1).trim();
    return t.startsWith("/") ? t : null;
  }
  const cmdRaw = extractCommand(userText);
  const cmd = cmdRaw ? cmdRaw.toLowerCase() : null;
const tokens = cmdRaw ? cmdRaw.trim().split(/\s+/) : [];
const args   = tokens.slice(1);


  if (!cmd) LC.detectInputType(raw);

  // ==== –ö–æ–º–∞–Ω–¥—ã ====
  if (cmd) {
    ensureCommandRegistryBypassGuard();

    const wantRecap = L.currentAction?.wantRecap || false;

    ensureSharedCommand("/help", buildHelpMessage);
    ensureSharedCommand("/h", buildHelpMessage);
    ensureSharedCommand("/stats", buildStatsMessage);

    // Try registry first
    const def = LC.Commands?.get(cmd);
    if (def && typeof def.handler === "function") {
      if (def.bypass === true) {
        L.currentAction = { type: 'command', name: cmd };
        L.lastActionType = "command";
      } else {
        setCommandMode();
        L.lastActionType = "command";
      }
      try {
        const res = def.handler(args, text);
        if (def?.bypass) {
          L.currentAction = { type: 'command', name: cmd };
          L.lastActionType = "command";
        }
        return res;
      } catch (e) {
        return replyStop(`Command failed: ${e?.message || e}`);
      }
    }

    setCommandMode();
    L.lastActionType = "command";

    if (def?.bypass) {
      L.currentAction = { type: 'command', name: cmd };
      L.lastActionType = "command";
    }

// /undo [N]
    if (cmd === "/undo") {
      const n = Number(args[0] || 1);
      try { if (typeof LC !== 'undefined') LC.turnUndo(n); } catch(e) { try { LC.lcSys("‚ö†Ô∏è Undo failed."); } catch(_){} }
      clearCommandFlags({ preserveCycle: true });
      return replyStop(`‚Ü©Ô∏è Undid ${n|0} turn${(n|0)===1?"":"s"}.`);
    }

    // /turn set N
    if (cmd === "/turn" && (args[0] || "").toLowerCase() === "set") {
      const n = Number(args[1] || 0);
      try { if (typeof LC !== 'undefined') LC.turnSet(n); } catch(e) { try { LC.lcSys("‚ö†Ô∏è Turn set failed."); } catch(_){} }
      clearCommandFlags({ preserveCycle: true });
      return replyStop(`‚Ü©Ô∏è Turn set to ${n|0}.`);
    }


    // –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ñ—Ñ–µ—Ä recap
    if (cmd === "/–¥–∞")   {
      if (!(typeof LC !== 'undefined' && L.currentAction && L.currentAction.wantRecap)) {
        return replyStop('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ —Ä–µ–∫–∞–ø–∞.');
      }
      delete L.currentAction.wantRecap;
      L.recapMuteUntil = L.turn;
      L.currentAction = { type: 'story', task: 'recap' };
      clearCommandFlags({ preserveCycle: true }); // –≤–∞–∂–Ω–æ: —Å–Ω—è—Ç—å isCmd –¥–æ Context, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      return replyStop("üìã Recap will be generated.");
    }
    if (cmd === "/–Ω–µ—Ç")  {
      if (!(typeof LC !== 'undefined' && L.currentAction && L.currentAction.wantRecap)) {
        return replyStop('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ —Ä–µ–∫–∞–ø–∞.');
      }
      delete L.currentAction.wantRecap;
      L.recapMuteUntil = L.turn + 5;
      return replyStop("üö´ Recap postponed for 5 turns.");
    }
    if (cmd === "/–ø–æ–∑–∂–µ"){
      if (!(typeof LC !== 'undefined' && L.currentAction && L.currentAction.wantRecap)) {
        return replyStop('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ —Ä–µ–∫–∞–ø–∞.');
      }
      delete L.currentAction.wantRecap;
      L.recapMuteUntil = L.turn + 3; 
      if (L.tm) L.tm.wantRecapTurn = 0;
      return replyStop("üïë Recap later (3 turns).");
    }

    // Try CommandsRegistry
    const registryDef = LC.CommandsRegistry?.get?.(cmd);
    if (registryDef && typeof registryDef.handler === "function") {
      try {
        const res = registryDef.handler(args, cmdRaw);
        return res;
      } catch (e) {
        return replyStop(`Command failed: ${e?.message || e}`);
      }
    }

    return replyStop("Unknown command. Use /help.");
  }

  // –ù–µ –∫–æ–º–∞–Ω–¥–∞ ‚Äî Intent
  const _isCont = L.currentAction?.type === 'continue';
const _isRet  = L.currentAction?.type === 'retry';
if (!_isCont && !_isRet && userText && userText.length > 0) L.lastIntent = userText.slice(0, 300);
  return { text: String(userText || "") };
};
return modifier(text);