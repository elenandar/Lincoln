/*
Module: Input â€” Lincoln v17.0.0-phase1
Contract:
- Phase 1: Infrastructure Layer Implementation
- Handles command parsing and execution
- Detects and tracks action types (do/say/story)
- Increments turn counter on each input
*/

// === INPUT MODIFIER v17.0.0-phase1 ===
const __SCRIPT_SLOT__ = "Input";

const modifier = function(text) {
  // Safe text handling
  var raw = String(text || "");
  var userText = raw.trim();
  
  // Check if LC is available
  if (typeof LC === "undefined") {
    return { text: raw };
  }
  
  // Initialize for this slot
  var L = LC.lcInit(__SCRIPT_SLOT__);
  
  // Increment turn counter at start of each input
  if (LC.Turns) {
    LC.Turns.increment();
  }
  
  // ===== ROBUST COMMAND EXTRACTION =====
  // AI Dungeon preprocesses input differently per mode:
  // - Do mode:    "> You /ping." or "You /ping."
  // - Say mode:   "> You say \"/ping\"" or "You say \"/ping\""
  // - Story mode: "/ping" (raw) or "  /ping"
  
  // Step 1: Remove AI Dungeon prefixes (>, You, You say, etc.)
  var cleanText = userText
    .replace(/^>\s*/i, '')                    // Remove "> " prefix
    .replace(/^you\s+say\s+["']?/i, '')       // Remove "You say \"" or "You say '"
    .replace(/^you\s+/i, '')                  // Remove "You " prefix
    .trim();
  
  // Step 2: Remove trailing punctuation and quotes
  cleanText = cleanText.replace(/[.!?;,]+$/, '').replace(/["']+$/, '').trim();
  
  // Step 3: Check if it's a command (starts with /)
  if (cleanText.charAt(0) === "/") {
    // Extract command and arguments
    var parts = cleanText.slice(1).split(/\s+/);
    var cmdName = parts[0].toLowerCase();
    
    // Remove any trailing punctuation from command name
    cmdName = cmdName.replace(/[.!?;,:"']+$/, '');
    
    // Skip if command name is empty (just "/" typed)
    if (!cmdName) {
      return { text: raw };
    }
    
    var args = parts.slice(1);
    
    // Check if command exists
    if (LC.Commands && LC.Commands.has(cmdName)) {
      // Execute command and add result to Drafts queue
      var result = LC.Commands.execute(cmdName, args);
      if (LC.Drafts && result) {
        LC.Drafts.add(result);
      }
      // Set flag for Context Hook to halt generation
      // (stop:true in Input is not honored by AI Dungeon)
      if (state.lincoln) {
        state.lincoln._commandExecuted = true;
        state.lincoln.stateVersion++;
      }
      // Return minimal input (no stop:true!)
      return { text: " " };
    }
  }
  
  // Detect action type from user input
  if (LC.currentAction && userText) {
    LC.currentAction.detect(userText);
  }
  
  // Pass through user input
  return { text: raw };
};

// Execute modifier and return result
return modifier(text);
