#!/usr/bin/env node
/**
 * Demo script showing Living World Engine in action
 * 
 * This demonstrates a complete narrative scenario:
 * 1. Player goes to sleep (ADVANCE_TO_NEXT_MORNING)
 * 2. Living World simulates off-screen NPC actions
 * 3. Player wakes up to discover consequences
 * 4. Multiple characters with different motivations
 */

console.log("=== Living World Engine Demo ===\n");

const fs = require('fs');

// Load library code
const libraryCode = fs.readFileSync('./Library v16.0.8.patched.txt', 'utf8');

// Set up global state
global.state = { lincoln: {} };

// Helper functions
const toNum = (x, d = 0) => (typeof x === 'number' && !isNaN(x)) ? x : (Number(x) || d);
const toStr = (x) => String(x == null ? "" : x);
const toBool = (x, d = false) => (x == null ? d : !!x);

// Evaluate library code
eval(libraryCode);

// Initialize
const L = LC.lcInit();
L.turn = 42;

console.log("üìñ Scenario: A Day at Lincoln Heights School\n");
console.log("=".repeat(60));
console.log("");

// ========== SETUP: Day 3, Evening ==========
console.log("‚è∞ DAY 3, EVENING - Before Sleep\n");

L.time = {
  currentDay: 3,
  dayName: '–°—Ä–µ–¥–∞',
  timeOfDay: '–í–µ—á–µ—Ä',
  turnsPerToD: 5,
  turnsInCurrentToD: 0,
  scheduledEvents: [
    { id: 'party_001', title: '–®–∫–æ–ª—å–Ω–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞', day: 5 }
  ]
};

// Setup characters with rich states
L.characters = {
  '–ú–∞–∫—Å–∏–º': {
    mentions: 25,
    lastSeen: L.turn,
    status: 'ACTIVE',
    type: 'MAIN',
    flags: {}
  },
  '–•–ª–æ—è': {
    mentions: 20,
    lastSeen: L.turn,
    status: 'ACTIVE',
    type: 'SECONDARY',
    flags: {}
  },
  '–≠—à–ª–∏': {
    mentions: 18,
    lastSeen: L.turn,
    status: 'ACTIVE',
    type: 'SECONDARY',
    flags: {}
  },
  '–í–∏–∫—Ç–æ—Ä': {
    mentions: 15,
    lastSeen: L.turn,
    status: 'ACTIVE',
    type: 'SECONDARY',
    flags: {}
  },
  '–°—Ç–∞—Ä—ã–π_–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫': {
    mentions: 2,
    lastSeen: L.turn - 80,
    status: 'FROZEN',
    type: 'EXTRA',
    flags: {}
  }
};

// Setup goals
L.goals = {
  'goal_maxim_exam': {
    character: '–ú–∞–∫—Å–∏–º',
    description: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ',
    status: 'active',
    turn: L.turn - 5
  },
  'goal_ashley_secret': {
    character: '–≠—à–ª–∏',
    description: '–†–∞—Å–∫—Ä—ã—Ç—å —Å–µ–∫—Ä–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞',
    status: 'active',
    turn: L.turn - 3
  }
};

// Setup relationships
L.evergreen = {
  relations: {
    '–ú–∞–∫—Å–∏–º': { '–•–ª–æ—è': 75, '–≠—à–ª–∏': -30, '–í–∏–∫—Ç–æ—Ä': 20 },
    '–•–ª–æ—è': { '–ú–∞–∫—Å–∏–º': 70, '–≠—à–ª–∏': 35, '–í–∏–∫—Ç–æ—Ä': 15 },
    '–≠—à–ª–∏': { '–ú–∞–∫—Å–∏–º': -35, '–•–ª–æ—è': 30, '–í–∏–∫—Ç–æ—Ä': -10 },
    '–í–∏–∫—Ç–æ—Ä': { '–ú–∞–∫—Å–∏–º': 18, '–•–ª–æ—è': 12, '–≠—à–ª–∏': -5 }
  }
};

// Setup moods
L.character_status = {
  '–ú–∞–∫—Å–∏–º': { mood: 'DETERMINED', reason: '–≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É', turn: L.turn },
  '–•–ª–æ—è': { mood: 'HAPPY', reason: '–≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏', turn: L.turn },
  '–≠—à–ª–∏': { mood: 'FRUSTRATED', reason: '—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–µ—É–¥–∞—á–µ–π', turn: L.turn },
  '–í–∏–∫—Ç–æ—Ä': { mood: 'NEUTRAL', reason: '', turn: L.turn - 10 }
};

// Display initial state
console.log("üìä Current State:");
console.log("-".repeat(60));
console.log(`Time: ${L.time.dayName}, ${L.time.timeOfDay}`);
console.log(`Active Characters: 4 (+ 1 FROZEN)`);
console.log("");

console.log("üéØ Active Goals:");
console.log("  ‚Ä¢ –ú–∞–∫—Å–∏–º: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É (0% progress)");
console.log("  ‚Ä¢ –≠—à–ª–∏: –†–∞—Å–∫—Ä—ã—Ç—å —Å–µ–∫—Ä–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ (0% progress)");
console.log("");

console.log("üí≠ Relationships:");
console.log("  ‚Ä¢ –ú–∞–∫—Å–∏–º ‚Üî –•–ª–æ—è: 75 (very positive) üíö");
console.log("  ‚Ä¢ –ú–∞–∫—Å–∏–º ‚Üî –≠—à–ª–∏: -30 (negative) üíî");
console.log("  ‚Ä¢ –í–∏–∫—Ç–æ—Ä ‚Üí Others: weak connections");
console.log("");

console.log("üòä Moods:");
console.log("  ‚Ä¢ –ú–∞–∫—Å–∏–º: DETERMINED (focused on exam)");
console.log("  ‚Ä¢ –•–ª–æ—è: HAPPY (cheerful)");
console.log("  ‚Ä¢ –≠—à–ª–∏: FRUSTRATED (upset)");
console.log("  ‚Ä¢ –í–∏–∫—Ç–æ—Ä: (no strong mood)");
console.log("");

console.log("üìÖ Upcoming Events:");
console.log("  ‚Ä¢ –®–∫–æ–ª—å–Ω–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ - in 2 days (Day 5)");
console.log("");

// ========== TRIGGER: Player Goes to Sleep ==========
console.log("=".repeat(60));
console.log("\nüí§ PLAYER GOES TO SLEEP...\n");
console.log("Triggering: ADVANCE_TO_NEXT_MORNING");
console.log("");

// Simulate the time jump
LC.TimeEngine.processSemanticAction({ type: 'ADVANCE_TO_NEXT_MORNING' });
const timeJump = LC.TimeEngine.advance();

console.log("üåç Living World Simulation Running...\n");
console.log("-".repeat(60));

// Run the Living World simulation
LC.LivingWorld.runOffScreenCycle(timeJump);

console.log("");
console.log("‚úì Simulation complete: " + timeJump.duration);
console.log("");

// ========== RESULTS: Next Morning ==========
console.log("=".repeat(60));
console.log("\n‚òÄÔ∏è DAY 4, –£–¢–†–û - Player Wakes Up\n");

console.log("üìä State Changes (Silent, Behind the Scenes):");
console.log("-".repeat(60));
console.log("");

console.log("üéØ Goal Progress:");
const maximGoalProgress = L.characters['–ú–∞–∫—Å–∏–º'].flags['goal_progress_goal_maxim_exam'] || 0;
const ashleyGoalProgress = L.characters['–≠—à–ª–∏'].flags['goal_progress_goal_ashley_secret'] || 0;
console.log(`  ‚Ä¢ –ú–∞–∫—Å–∏–º exam preparation: ${(maximGoalProgress * 100).toFixed(0)}%`);
console.log(`    ‚Üí Spent the night studying!`);
console.log(`  ‚Ä¢ –≠—à–ª–∏ investigation: ${(ashleyGoalProgress * 100).toFixed(0)}%`);
console.log(`    ‚Üí Made progress on uncovering the secret`);
console.log("");

console.log("üí≠ Relationship Changes:");
const maximChloeAfter = L.evergreen.relations['–ú–∞–∫—Å–∏–º']['–•–ª–æ—è'];
const maximAshleyAfter = L.evergreen.relations['–ú–∞–∫—Å–∏–º']['–≠—à–ª–∏'];
const viktorPrep = L.characters['–í–∏–∫—Ç–æ—Ä'].flags['event_preparation_party_001'];
console.log(`  ‚Ä¢ –ú–∞–∫—Å–∏–º ‚Üî –•–ª–æ—è: 75 ‚Üí ${maximChloeAfter} (+${maximChloeAfter - 75})`);
console.log(`    ‚Üí –•–ª–æ—è's HAPPY mood made their connection stronger!`);
console.log(`  ‚Ä¢ –ú–∞–∫—Å–∏–º ‚Üî –≠—à–ª–∏: -30 ‚Üí ${maximAshleyAfter} (${maximAshleyAfter - (-30)})`);
console.log(`    ‚Üí –≠—à–ª–∏'s FRUSTRATED mood made things worse...`);
console.log("");

console.log("üìÖ Event Preparation:");
console.log(`  ‚Ä¢ –í–∏–∫—Ç–æ—Ä prepared for party: ${viktorPrep ? 'Yes ‚úì' : 'No'}`);
if (viktorPrep) {
  console.log(`    ‚Üí No strong goals/relations, so focused on upcoming event`);
}
console.log("");

console.log("‚ùÑÔ∏è FROZEN Characters:");
console.log("  ‚Ä¢ –°—Ç–∞—Ä—ã–π_–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫: No changes (skipped)");
console.log("");

// ========== NARRATIVE IMPACT ==========
console.log("=".repeat(60));
console.log("\nüìñ How This Appears in Narrative:\n");
console.log("-".repeat(60));
console.log("");

console.log("The AI doesn't receive text about these changes.");
console.log("Instead, they're reflected in the context overlay:");
console.log("");

// Simulate what the context might show
console.log("‚ü¶GOALS‚üß");
console.log(`  –ú–∞–∫—Å–∏–º (${(maximGoalProgress * 100).toFixed(0)}% progress): –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É`);
console.log(`  –≠—à–ª–∏ (${(ashleyGoalProgress * 100).toFixed(0)}% progress): –†–∞—Å–∫—Ä—ã—Ç—å —Å–µ–∫—Ä–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞`);
console.log("");

console.log("‚ü¶RELATIONS‚üß");
console.log(`  –ú–∞–∫—Å–∏–º ‚Üí –•–ª–æ—è: ${maximChloeAfter} (very positive)`);
console.log(`  –ú–∞–∫—Å–∏–º ‚Üí –≠—à–ª–∏: ${maximAshleyAfter} (negative)`);
console.log("");

console.log("The AI naturally incorporates these changes:");
console.log("");
console.log('Player: "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ú–∞–∫—Å–∏–º!"');
console.log("");
console.log("AI might respond:");
console.log('  "–ú–∞–∫—Å–∏–º –≤—ã–≥–ª—è–¥–∏—Ç —É—Å—Ç–∞–≤—à–∏–º, –Ω–æ –¥–æ–≤–æ–ª—å–Ω—ã–º. –í–∏–¥–Ω–æ, —á—Ç–æ –æ–Ω');
console.log('   –ø—Ä–æ–≤—ë–ª –≤—Å—é –Ω–æ—á—å –∑–∞ —É—á–µ–±–Ω–∏–∫–∞–º–∏. –•–ª–æ—è –ø–æ–¥—Ö–æ–¥–∏—Ç —Å —É–ª—ã–±–∫–æ–π,');
console.log('   –∏ –∏—Ö –¥—Ä—É–∂–±–∞ –∫–∞–∂–µ—Ç—Å—è –µ—â—ë –∫—Ä–µ–ø—á–µ –ø–æ—Å–ª–µ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –≤–µ—á–µ—Ä–∞.');
console.log('   –≠—à–ª–∏ –∂–µ –±—Ä–æ—Å–∞–µ—Ç –Ω–∞ –Ω–µ–≥–æ —Å–µ—Ä–¥–∏—Ç—ã–π –≤–∑–≥–ª—è–¥ –∏–∑-–∑–∞ –∏—Ö');
console.log('   –Ω–µ–¥–∞–≤–Ω–µ–π —Å—Å–æ—Ä—ã..."');
console.log("");

// ========== SUMMARY ==========
console.log("=".repeat(60));
console.log("\nüìà Summary of Living World Impact:\n");
console.log("-".repeat(60));
console.log("");

console.log("‚úÖ Autonomous Actions Taken:");
console.log("  ‚Ä¢ 4 characters simulated (1 frozen, skipped)");
console.log("  ‚Ä¢ 2 goal pursuits (–ú–∞–∫—Å–∏–º, –≠—à–ª–∏)");
console.log("  ‚Ä¢ 2 relationship interactions (–•–ª–æ—è, –≠—à–ª–∏ with –ú–∞–∫—Å–∏–º)");
console.log("  ‚Ä¢ 1 event preparation (–í–∏–∫—Ç–æ—Ä for party)");
console.log("");

console.log("üé≠ Motivation Pyramid in Action:");
console.log("  Priority 1 (Goals): –ú–∞–∫—Å–∏–º, –≠—à–ª–∏");
console.log("  Priority 2 (Relations): –•–ª–æ—è (positive), –í–∏–∫—Ç–æ—Ä considered but...");
console.log("  Priority 3 (Events): –í–∏–∫—Ç–æ—Ä (no strong relations, prepared for party)");
console.log("");

console.log("üé® Design Principles Demonstrated:");
console.log("  ‚úì Proactive world (NPCs act independently)");
console.log("  ‚úì Fact-based (no text, only state changes)");
console.log("  ‚úì Integration (uses GoalsEngine, RelationsEngine, MoodEngine)");
console.log("  ‚úì Performance (skips frozen characters)");
console.log("  ‚úì Player discovery (changes revealed naturally in next scene)");
console.log("");

console.log("Demo complete! The world is now alive. üåç‚ú®");
